{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOiA+Qhjmk8g7+tuKRqA6bI",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/saheli56/ml-handbook/blob/main/%20KNN%20in%20Machine%20Learning%20-%20Practical%202ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OhnBV_nKnEkv",
        "outputId": "e235f19b-a23f-4820-b7f3-c73c5ff2714d"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:203: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset = pd.read_csv('/content/Social_Network_Ads.csv')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2Zd54qPnnJdB",
        "outputId": "e12ab438-ed31-464e-d435-db84d5a1f157"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:203: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 478
        },
        "id": "dtv0Wkd4nUM8",
        "outputId": "02fb92e7-8a00-458a-e6b8-e184842769b3"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      User ID  Gender  Age  EstimatedSalary  Purchased\n",
              "0    15624510    Male   19            19000          0\n",
              "1    15810944    Male   35            20000          0\n",
              "2    15668575  Female   26            43000          0\n",
              "3    15603246  Female   27            57000          0\n",
              "4    15804002    Male   19            76000          0\n",
              "..        ...     ...  ...              ...        ...\n",
              "395  15691863  Female   46            41000          1\n",
              "396  15706071    Male   51            23000          1\n",
              "397  15654296  Female   50            20000          1\n",
              "398  15755018    Male   36            33000          0\n",
              "399  15594041  Female   49            36000          1\n",
              "\n",
              "[400 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3cd74ef6-0fff-4133-871a-4116b85288d5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User ID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Purchased</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>15624510</td>\n",
              "      <td>Male</td>\n",
              "      <td>19</td>\n",
              "      <td>19000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>15810944</td>\n",
              "      <td>Male</td>\n",
              "      <td>35</td>\n",
              "      <td>20000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>15668575</td>\n",
              "      <td>Female</td>\n",
              "      <td>26</td>\n",
              "      <td>43000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>15603246</td>\n",
              "      <td>Female</td>\n",
              "      <td>27</td>\n",
              "      <td>57000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>15804002</td>\n",
              "      <td>Male</td>\n",
              "      <td>19</td>\n",
              "      <td>76000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>395</th>\n",
              "      <td>15691863</td>\n",
              "      <td>Female</td>\n",
              "      <td>46</td>\n",
              "      <td>41000</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>396</th>\n",
              "      <td>15706071</td>\n",
              "      <td>Male</td>\n",
              "      <td>51</td>\n",
              "      <td>23000</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>397</th>\n",
              "      <td>15654296</td>\n",
              "      <td>Female</td>\n",
              "      <td>50</td>\n",
              "      <td>20000</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>398</th>\n",
              "      <td>15755018</td>\n",
              "      <td>Male</td>\n",
              "      <td>36</td>\n",
              "      <td>33000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>399</th>\n",
              "      <td>15594041</td>\n",
              "      <td>Female</td>\n",
              "      <td>49</td>\n",
              "      <td>36000</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>400 rows Ã— 5 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3cd74ef6-0fff-4133-871a-4116b85288d5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3cd74ef6-0fff-4133-871a-4116b85288d5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3cd74ef6-0fff-4133-871a-4116b85288d5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-20c029f7-4c6b-4151-b588-a8f8f53c2c0b\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-20c029f7-4c6b-4151-b588-a8f8f53c2c0b')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-20c029f7-4c6b-4151-b588-a8f8f53c2c0b button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_07d353f9-fe21-4162-97cc-c946e946aeb9\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('dataset')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_07d353f9-fe21-4162-97cc-c946e946aeb9 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('dataset');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dataset",
              "summary": "{\n  \"name\": \"dataset\",\n  \"rows\": 400,\n  \"fields\": [\n    {\n      \"column\": \"User ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 71658,\n        \"min\": 15566689,\n        \"max\": 15815236,\n        \"num_unique_values\": 400,\n        \"samples\": [\n          15697424,\n          15609669,\n          15776733\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 18,\n        \"max\": 60,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          50,\n          39\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EstimatedSalary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34096,\n        \"min\": 15000,\n        \"max\": 150000,\n        \"num_unique_values\": 117,\n        \"samples\": [\n          117000,\n          76000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Purchased\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 12
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:203: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Find out- person will buy a new car or not"
      ],
      "metadata": {
        "id": "MEb3Dh_Rnkpk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n"
      ],
      "metadata": {
        "id": "BwaHE3U_nyGy"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x = dataset.iloc[:,[2,3]].values"
      ],
      "metadata": {
        "id": "Y2lr_EsjoE2V"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y = dataset.iloc[:,4].values"
      ],
      "metadata": {
        "id": "78xIpao-oQ2j"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8q8GeekxoVv8",
        "outputId": "472d34fc-ed0e-46e2-9347-19d4c310348c"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[    19,  19000],\n",
              "       [    35,  20000],\n",
              "       [    26,  43000],\n",
              "       [    27,  57000],\n",
              "       [    19,  76000],\n",
              "       [    27,  58000],\n",
              "       [    27,  84000],\n",
              "       [    32, 150000],\n",
              "       [    25,  33000],\n",
              "       [    35,  65000],\n",
              "       [    26,  80000],\n",
              "       [    26,  52000],\n",
              "       [    20,  86000],\n",
              "       [    32,  18000],\n",
              "       [    18,  82000],\n",
              "       [    29,  80000],\n",
              "       [    47,  25000],\n",
              "       [    45,  26000],\n",
              "       [    46,  28000],\n",
              "       [    48,  29000],\n",
              "       [    45,  22000],\n",
              "       [    47,  49000],\n",
              "       [    48,  41000],\n",
              "       [    45,  22000],\n",
              "       [    46,  23000],\n",
              "       [    47,  20000],\n",
              "       [    49,  28000],\n",
              "       [    47,  30000],\n",
              "       [    29,  43000],\n",
              "       [    31,  18000],\n",
              "       [    31,  74000],\n",
              "       [    27, 137000],\n",
              "       [    21,  16000],\n",
              "       [    28,  44000],\n",
              "       [    27,  90000],\n",
              "       [    35,  27000],\n",
              "       [    33,  28000],\n",
              "       [    30,  49000],\n",
              "       [    26,  72000],\n",
              "       [    27,  31000],\n",
              "       [    27,  17000],\n",
              "       [    33,  51000],\n",
              "       [    35, 108000],\n",
              "       [    30,  15000],\n",
              "       [    28,  84000],\n",
              "       [    23,  20000],\n",
              "       [    25,  79000],\n",
              "       [    27,  54000],\n",
              "       [    30, 135000],\n",
              "       [    31,  89000],\n",
              "       [    24,  32000],\n",
              "       [    18,  44000],\n",
              "       [    29,  83000],\n",
              "       [    35,  23000],\n",
              "       [    27,  58000],\n",
              "       [    24,  55000],\n",
              "       [    23,  48000],\n",
              "       [    28,  79000],\n",
              "       [    22,  18000],\n",
              "       [    32, 117000],\n",
              "       [    27,  20000],\n",
              "       [    25,  87000],\n",
              "       [    23,  66000],\n",
              "       [    32, 120000],\n",
              "       [    59,  83000],\n",
              "       [    24,  58000],\n",
              "       [    24,  19000],\n",
              "       [    23,  82000],\n",
              "       [    22,  63000],\n",
              "       [    31,  68000],\n",
              "       [    25,  80000],\n",
              "       [    24,  27000],\n",
              "       [    20,  23000],\n",
              "       [    33, 113000],\n",
              "       [    32,  18000],\n",
              "       [    34, 112000],\n",
              "       [    18,  52000],\n",
              "       [    22,  27000],\n",
              "       [    28,  87000],\n",
              "       [    26,  17000],\n",
              "       [    30,  80000],\n",
              "       [    39,  42000],\n",
              "       [    20,  49000],\n",
              "       [    35,  88000],\n",
              "       [    30,  62000],\n",
              "       [    31, 118000],\n",
              "       [    24,  55000],\n",
              "       [    28,  85000],\n",
              "       [    26,  81000],\n",
              "       [    35,  50000],\n",
              "       [    22,  81000],\n",
              "       [    30, 116000],\n",
              "       [    26,  15000],\n",
              "       [    29,  28000],\n",
              "       [    29,  83000],\n",
              "       [    35,  44000],\n",
              "       [    35,  25000],\n",
              "       [    28, 123000],\n",
              "       [    35,  73000],\n",
              "       [    28,  37000],\n",
              "       [    27,  88000],\n",
              "       [    28,  59000],\n",
              "       [    32,  86000],\n",
              "       [    33, 149000],\n",
              "       [    19,  21000],\n",
              "       [    21,  72000],\n",
              "       [    26,  35000],\n",
              "       [    27,  89000],\n",
              "       [    26,  86000],\n",
              "       [    38,  80000],\n",
              "       [    39,  71000],\n",
              "       [    37,  71000],\n",
              "       [    38,  61000],\n",
              "       [    37,  55000],\n",
              "       [    42,  80000],\n",
              "       [    40,  57000],\n",
              "       [    35,  75000],\n",
              "       [    36,  52000],\n",
              "       [    40,  59000],\n",
              "       [    41,  59000],\n",
              "       [    36,  75000],\n",
              "       [    37,  72000],\n",
              "       [    40,  75000],\n",
              "       [    35,  53000],\n",
              "       [    41,  51000],\n",
              "       [    39,  61000],\n",
              "       [    42,  65000],\n",
              "       [    26,  32000],\n",
              "       [    30,  17000],\n",
              "       [    26,  84000],\n",
              "       [    31,  58000],\n",
              "       [    33,  31000],\n",
              "       [    30,  87000],\n",
              "       [    21,  68000],\n",
              "       [    28,  55000],\n",
              "       [    23,  63000],\n",
              "       [    20,  82000],\n",
              "       [    30, 107000],\n",
              "       [    28,  59000],\n",
              "       [    19,  25000],\n",
              "       [    19,  85000],\n",
              "       [    18,  68000],\n",
              "       [    35,  59000],\n",
              "       [    30,  89000],\n",
              "       [    34,  25000],\n",
              "       [    24,  89000],\n",
              "       [    27,  96000],\n",
              "       [    41,  30000],\n",
              "       [    29,  61000],\n",
              "       [    20,  74000],\n",
              "       [    26,  15000],\n",
              "       [    41,  45000],\n",
              "       [    31,  76000],\n",
              "       [    36,  50000],\n",
              "       [    40,  47000],\n",
              "       [    31,  15000],\n",
              "       [    46,  59000],\n",
              "       [    29,  75000],\n",
              "       [    26,  30000],\n",
              "       [    32, 135000],\n",
              "       [    32, 100000],\n",
              "       [    25,  90000],\n",
              "       [    37,  33000],\n",
              "       [    35,  38000],\n",
              "       [    33,  69000],\n",
              "       [    18,  86000],\n",
              "       [    22,  55000],\n",
              "       [    35,  71000],\n",
              "       [    29, 148000],\n",
              "       [    29,  47000],\n",
              "       [    21,  88000],\n",
              "       [    34, 115000],\n",
              "       [    26, 118000],\n",
              "       [    34,  43000],\n",
              "       [    34,  72000],\n",
              "       [    23,  28000],\n",
              "       [    35,  47000],\n",
              "       [    25,  22000],\n",
              "       [    24,  23000],\n",
              "       [    31,  34000],\n",
              "       [    26,  16000],\n",
              "       [    31,  71000],\n",
              "       [    32, 117000],\n",
              "       [    33,  43000],\n",
              "       [    33,  60000],\n",
              "       [    31,  66000],\n",
              "       [    20,  82000],\n",
              "       [    33,  41000],\n",
              "       [    35,  72000],\n",
              "       [    28,  32000],\n",
              "       [    24,  84000],\n",
              "       [    19,  26000],\n",
              "       [    29,  43000],\n",
              "       [    19,  70000],\n",
              "       [    28,  89000],\n",
              "       [    34,  43000],\n",
              "       [    30,  79000],\n",
              "       [    20,  36000],\n",
              "       [    26,  80000],\n",
              "       [    35,  22000],\n",
              "       [    35,  39000],\n",
              "       [    49,  74000],\n",
              "       [    39, 134000],\n",
              "       [    41,  71000],\n",
              "       [    58, 101000],\n",
              "       [    47,  47000],\n",
              "       [    55, 130000],\n",
              "       [    52, 114000],\n",
              "       [    40, 142000],\n",
              "       [    46,  22000],\n",
              "       [    48,  96000],\n",
              "       [    52, 150000],\n",
              "       [    59,  42000],\n",
              "       [    35,  58000],\n",
              "       [    47,  43000],\n",
              "       [    60, 108000],\n",
              "       [    49,  65000],\n",
              "       [    40,  78000],\n",
              "       [    46,  96000],\n",
              "       [    59, 143000],\n",
              "       [    41,  80000],\n",
              "       [    35,  91000],\n",
              "       [    37, 144000],\n",
              "       [    60, 102000],\n",
              "       [    35,  60000],\n",
              "       [    37,  53000],\n",
              "       [    36, 126000],\n",
              "       [    56, 133000],\n",
              "       [    40,  72000],\n",
              "       [    42,  80000],\n",
              "       [    35, 147000],\n",
              "       [    39,  42000],\n",
              "       [    40, 107000],\n",
              "       [    49,  86000],\n",
              "       [    38, 112000],\n",
              "       [    46,  79000],\n",
              "       [    40,  57000],\n",
              "       [    37,  80000],\n",
              "       [    46,  82000],\n",
              "       [    53, 143000],\n",
              "       [    42, 149000],\n",
              "       [    38,  59000],\n",
              "       [    50,  88000],\n",
              "       [    56, 104000],\n",
              "       [    41,  72000],\n",
              "       [    51, 146000],\n",
              "       [    35,  50000],\n",
              "       [    57, 122000],\n",
              "       [    41,  52000],\n",
              "       [    35,  97000],\n",
              "       [    44,  39000],\n",
              "       [    37,  52000],\n",
              "       [    48, 134000],\n",
              "       [    37, 146000],\n",
              "       [    50,  44000],\n",
              "       [    52,  90000],\n",
              "       [    41,  72000],\n",
              "       [    40,  57000],\n",
              "       [    58,  95000],\n",
              "       [    45, 131000],\n",
              "       [    35,  77000],\n",
              "       [    36, 144000],\n",
              "       [    55, 125000],\n",
              "       [    35,  72000],\n",
              "       [    48,  90000],\n",
              "       [    42, 108000],\n",
              "       [    40,  75000],\n",
              "       [    37,  74000],\n",
              "       [    47, 144000],\n",
              "       [    40,  61000],\n",
              "       [    43, 133000],\n",
              "       [    59,  76000],\n",
              "       [    60,  42000],\n",
              "       [    39, 106000],\n",
              "       [    57,  26000],\n",
              "       [    57,  74000],\n",
              "       [    38,  71000],\n",
              "       [    49,  88000],\n",
              "       [    52,  38000],\n",
              "       [    50,  36000],\n",
              "       [    59,  88000],\n",
              "       [    35,  61000],\n",
              "       [    37,  70000],\n",
              "       [    52,  21000],\n",
              "       [    48, 141000],\n",
              "       [    37,  93000],\n",
              "       [    37,  62000],\n",
              "       [    48, 138000],\n",
              "       [    41,  79000],\n",
              "       [    37,  78000],\n",
              "       [    39, 134000],\n",
              "       [    49,  89000],\n",
              "       [    55,  39000],\n",
              "       [    37,  77000],\n",
              "       [    35,  57000],\n",
              "       [    36,  63000],\n",
              "       [    42,  73000],\n",
              "       [    43, 112000],\n",
              "       [    45,  79000],\n",
              "       [    46, 117000],\n",
              "       [    58,  38000],\n",
              "       [    48,  74000],\n",
              "       [    37, 137000],\n",
              "       [    37,  79000],\n",
              "       [    40,  60000],\n",
              "       [    42,  54000],\n",
              "       [    51, 134000],\n",
              "       [    47, 113000],\n",
              "       [    36, 125000],\n",
              "       [    38,  50000],\n",
              "       [    42,  70000],\n",
              "       [    39,  96000],\n",
              "       [    38,  50000],\n",
              "       [    49, 141000],\n",
              "       [    39,  79000],\n",
              "       [    39,  75000],\n",
              "       [    54, 104000],\n",
              "       [    35,  55000],\n",
              "       [    45,  32000],\n",
              "       [    36,  60000],\n",
              "       [    52, 138000],\n",
              "       [    53,  82000],\n",
              "       [    41,  52000],\n",
              "       [    48,  30000],\n",
              "       [    48, 131000],\n",
              "       [    41,  60000],\n",
              "       [    41,  72000],\n",
              "       [    42,  75000],\n",
              "       [    36, 118000],\n",
              "       [    47, 107000],\n",
              "       [    38,  51000],\n",
              "       [    48, 119000],\n",
              "       [    42,  65000],\n",
              "       [    40,  65000],\n",
              "       [    57,  60000],\n",
              "       [    36,  54000],\n",
              "       [    58, 144000],\n",
              "       [    35,  79000],\n",
              "       [    38,  55000],\n",
              "       [    39, 122000],\n",
              "       [    53, 104000],\n",
              "       [    35,  75000],\n",
              "       [    38,  65000],\n",
              "       [    47,  51000],\n",
              "       [    47, 105000],\n",
              "       [    41,  63000],\n",
              "       [    53,  72000],\n",
              "       [    54, 108000],\n",
              "       [    39,  77000],\n",
              "       [    38,  61000],\n",
              "       [    38, 113000],\n",
              "       [    37,  75000],\n",
              "       [    42,  90000],\n",
              "       [    37,  57000],\n",
              "       [    36,  99000],\n",
              "       [    60,  34000],\n",
              "       [    54,  70000],\n",
              "       [    41,  72000],\n",
              "       [    40,  71000],\n",
              "       [    42,  54000],\n",
              "       [    43, 129000],\n",
              "       [    53,  34000],\n",
              "       [    47,  50000],\n",
              "       [    42,  79000],\n",
              "       [    42, 104000],\n",
              "       [    59,  29000],\n",
              "       [    58,  47000],\n",
              "       [    46,  88000],\n",
              "       [    38,  71000],\n",
              "       [    54,  26000],\n",
              "       [    60,  46000],\n",
              "       [    60,  83000],\n",
              "       [    39,  73000],\n",
              "       [    59, 130000],\n",
              "       [    37,  80000],\n",
              "       [    46,  32000],\n",
              "       [    46,  74000],\n",
              "       [    42,  53000],\n",
              "       [    41,  87000],\n",
              "       [    58,  23000],\n",
              "       [    42,  64000],\n",
              "       [    48,  33000],\n",
              "       [    44, 139000],\n",
              "       [    49,  28000],\n",
              "       [    57,  33000],\n",
              "       [    56,  60000],\n",
              "       [    49,  39000],\n",
              "       [    39,  71000],\n",
              "       [    47,  34000],\n",
              "       [    48,  35000],\n",
              "       [    48,  33000],\n",
              "       [    47,  23000],\n",
              "       [    45,  45000],\n",
              "       [    60,  42000],\n",
              "       [    39,  59000],\n",
              "       [    46,  41000],\n",
              "       [    51,  23000],\n",
              "       [    50,  20000],\n",
              "       [    36,  33000],\n",
              "       [    49,  36000]])"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-UeX6f4ioZwZ",
        "outputId": "66617e46-fd2d-47bb-974b-6c71697e4ec6"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(400, 2)"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wQFlqMt4obz9",
        "outputId": "7601aa90-9e23-4e8a-afd0-038ea1d614fa"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,\n",
              "       1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
              "       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,\n",
              "       0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,\n",
              "       0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n",
              "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
              "       0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,\n",
              "       0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,\n",
              "       0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
              "       0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1,\n",
              "       0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0,\n",
              "       1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0,\n",
              "       1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1,\n",
              "       0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1,\n",
              "       1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1,\n",
              "       0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0,\n",
              "       1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1,\n",
              "       0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1,\n",
              "       1, 1, 0, 1])"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5CTX1cO3odtL",
        "outputId": "d5c2d483-feb6-49d5-aaf0-09e3ba453ca2"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(400,)"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split"
      ],
      "metadata": {
        "id": "FirsNUt1ohOT"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.25,random_state=0)"
      ],
      "metadata": {
        "id": "73MZO8OdotKt"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QQmQBRy2o2-t",
        "outputId": "856179e2-2628-48a9-f9a2-f930d1b19610"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[    44,  39000],\n",
              "       [    32, 120000],\n",
              "       [    38,  50000],\n",
              "       [    32, 135000],\n",
              "       [    52,  21000],\n",
              "       [    53, 104000],\n",
              "       [    39,  42000],\n",
              "       [    38,  61000],\n",
              "       [    36,  50000],\n",
              "       [    36,  63000],\n",
              "       [    35,  25000],\n",
              "       [    35,  50000],\n",
              "       [    42,  73000],\n",
              "       [    47,  49000],\n",
              "       [    59,  29000],\n",
              "       [    49,  65000],\n",
              "       [    45, 131000],\n",
              "       [    31,  89000],\n",
              "       [    46,  82000],\n",
              "       [    47,  51000],\n",
              "       [    26,  15000],\n",
              "       [    60, 102000],\n",
              "       [    38, 112000],\n",
              "       [    40, 107000],\n",
              "       [    42,  53000],\n",
              "       [    35,  59000],\n",
              "       [    48,  41000],\n",
              "       [    48, 134000],\n",
              "       [    38, 113000],\n",
              "       [    29, 148000],\n",
              "       [    26,  15000],\n",
              "       [    60,  42000],\n",
              "       [    24,  19000],\n",
              "       [    42, 149000],\n",
              "       [    46,  96000],\n",
              "       [    28,  59000],\n",
              "       [    39,  96000],\n",
              "       [    28,  89000],\n",
              "       [    41,  72000],\n",
              "       [    45,  26000],\n",
              "       [    33,  69000],\n",
              "       [    20,  82000],\n",
              "       [    31,  74000],\n",
              "       [    42,  80000],\n",
              "       [    35,  72000],\n",
              "       [    33, 149000],\n",
              "       [    40,  71000],\n",
              "       [    51, 146000],\n",
              "       [    46,  79000],\n",
              "       [    35,  75000],\n",
              "       [    38,  51000],\n",
              "       [    36,  75000],\n",
              "       [    37,  78000],\n",
              "       [    38,  61000],\n",
              "       [    60, 108000],\n",
              "       [    20,  82000],\n",
              "       [    57,  74000],\n",
              "       [    42,  65000],\n",
              "       [    26,  80000],\n",
              "       [    46, 117000],\n",
              "       [    35,  61000],\n",
              "       [    21,  68000],\n",
              "       [    28,  44000],\n",
              "       [    41,  87000],\n",
              "       [    37,  33000],\n",
              "       [    27,  90000],\n",
              "       [    39,  42000],\n",
              "       [    28, 123000],\n",
              "       [    31, 118000],\n",
              "       [    25,  87000],\n",
              "       [    35,  71000],\n",
              "       [    37,  70000],\n",
              "       [    35,  39000],\n",
              "       [    47,  23000],\n",
              "       [    35, 147000],\n",
              "       [    48, 138000],\n",
              "       [    26,  86000],\n",
              "       [    25,  79000],\n",
              "       [    52, 138000],\n",
              "       [    51,  23000],\n",
              "       [    35,  60000],\n",
              "       [    33, 113000],\n",
              "       [    30, 107000],\n",
              "       [    48,  33000],\n",
              "       [    41,  80000],\n",
              "       [    48,  96000],\n",
              "       [    31,  18000],\n",
              "       [    31,  71000],\n",
              "       [    43, 129000],\n",
              "       [    59,  76000],\n",
              "       [    18,  44000],\n",
              "       [    36, 118000],\n",
              "       [    42,  90000],\n",
              "       [    47,  30000],\n",
              "       [    26,  43000],\n",
              "       [    40,  78000],\n",
              "       [    46,  59000],\n",
              "       [    59,  42000],\n",
              "       [    46,  74000],\n",
              "       [    35,  91000],\n",
              "       [    28,  59000],\n",
              "       [    40,  57000],\n",
              "       [    59, 143000],\n",
              "       [    57,  26000],\n",
              "       [    52,  38000],\n",
              "       [    47, 113000],\n",
              "       [    53, 143000],\n",
              "       [    35,  27000],\n",
              "       [    58, 101000],\n",
              "       [    45,  45000],\n",
              "       [    23,  82000],\n",
              "       [    46,  23000],\n",
              "       [    42,  65000],\n",
              "       [    28,  84000],\n",
              "       [    38,  59000],\n",
              "       [    26,  84000],\n",
              "       [    29,  28000],\n",
              "       [    37,  71000],\n",
              "       [    22,  55000],\n",
              "       [    48,  35000],\n",
              "       [    49,  28000],\n",
              "       [    38,  65000],\n",
              "       [    27,  17000],\n",
              "       [    46,  28000],\n",
              "       [    48, 141000],\n",
              "       [    26,  17000],\n",
              "       [    35,  97000],\n",
              "       [    39,  59000],\n",
              "       [    24,  27000],\n",
              "       [    32,  18000],\n",
              "       [    46,  88000],\n",
              "       [    35,  58000],\n",
              "       [    56,  60000],\n",
              "       [    47,  34000],\n",
              "       [    40,  72000],\n",
              "       [    32, 100000],\n",
              "       [    19,  21000],\n",
              "       [    25,  90000],\n",
              "       [    35,  88000],\n",
              "       [    28,  32000],\n",
              "       [    50,  20000],\n",
              "       [    40,  59000],\n",
              "       [    50,  44000],\n",
              "       [    35,  72000],\n",
              "       [    40, 142000],\n",
              "       [    46,  32000],\n",
              "       [    39,  71000],\n",
              "       [    20,  74000],\n",
              "       [    29,  75000],\n",
              "       [    31,  76000],\n",
              "       [    47,  25000],\n",
              "       [    40,  61000],\n",
              "       [    34, 112000],\n",
              "       [    38,  80000],\n",
              "       [    42,  75000],\n",
              "       [    47,  47000],\n",
              "       [    39,  75000],\n",
              "       [    19,  25000],\n",
              "       [    37,  80000],\n",
              "       [    36,  60000],\n",
              "       [    41,  52000],\n",
              "       [    36, 125000],\n",
              "       [    48,  29000],\n",
              "       [    36, 126000],\n",
              "       [    51, 134000],\n",
              "       [    27,  57000],\n",
              "       [    38,  71000],\n",
              "       [    39,  61000],\n",
              "       [    22,  27000],\n",
              "       [    33,  60000],\n",
              "       [    48,  74000],\n",
              "       [    58,  23000],\n",
              "       [    53,  72000],\n",
              "       [    32, 117000],\n",
              "       [    54,  70000],\n",
              "       [    30,  80000],\n",
              "       [    58,  95000],\n",
              "       [    26,  52000],\n",
              "       [    45,  79000],\n",
              "       [    24,  55000],\n",
              "       [    40,  75000],\n",
              "       [    33,  28000],\n",
              "       [    44, 139000],\n",
              "       [    22,  18000],\n",
              "       [    33,  51000],\n",
              "       [    43, 133000],\n",
              "       [    24,  32000],\n",
              "       [    46,  22000],\n",
              "       [    35,  55000],\n",
              "       [    54, 104000],\n",
              "       [    48, 119000],\n",
              "       [    35,  53000],\n",
              "       [    37, 144000],\n",
              "       [    23,  66000],\n",
              "       [    37, 137000],\n",
              "       [    31,  58000],\n",
              "       [    33,  41000],\n",
              "       [    45,  22000],\n",
              "       [    30,  15000],\n",
              "       [    19,  19000],\n",
              "       [    49,  74000],\n",
              "       [    39, 122000],\n",
              "       [    35,  73000],\n",
              "       [    39,  71000],\n",
              "       [    24,  23000],\n",
              "       [    41,  72000],\n",
              "       [    29,  83000],\n",
              "       [    54,  26000],\n",
              "       [    35,  44000],\n",
              "       [    37,  75000],\n",
              "       [    29,  47000],\n",
              "       [    31,  68000],\n",
              "       [    42,  54000],\n",
              "       [    30, 135000],\n",
              "       [    52, 114000],\n",
              "       [    50,  36000],\n",
              "       [    56, 133000],\n",
              "       [    29,  61000],\n",
              "       [    30,  89000],\n",
              "       [    26,  16000],\n",
              "       [    33,  31000],\n",
              "       [    41,  72000],\n",
              "       [    36,  33000],\n",
              "       [    55, 125000],\n",
              "       [    48, 131000],\n",
              "       [    41,  71000],\n",
              "       [    30,  62000],\n",
              "       [    37,  72000],\n",
              "       [    41,  63000],\n",
              "       [    58,  47000],\n",
              "       [    30, 116000],\n",
              "       [    20,  49000],\n",
              "       [    37,  74000],\n",
              "       [    41,  59000],\n",
              "       [    49,  89000],\n",
              "       [    28,  79000],\n",
              "       [    53,  82000],\n",
              "       [    40,  57000],\n",
              "       [    60,  34000],\n",
              "       [    35, 108000],\n",
              "       [    21,  72000],\n",
              "       [    38,  71000],\n",
              "       [    39, 106000],\n",
              "       [    37,  57000],\n",
              "       [    26,  72000],\n",
              "       [    35,  23000],\n",
              "       [    54, 108000],\n",
              "       [    30,  17000],\n",
              "       [    39, 134000],\n",
              "       [    29,  43000],\n",
              "       [    33,  43000],\n",
              "       [    35,  38000],\n",
              "       [    41,  45000],\n",
              "       [    41,  72000],\n",
              "       [    39, 134000],\n",
              "       [    27, 137000],\n",
              "       [    21,  16000],\n",
              "       [    26,  32000],\n",
              "       [    31,  66000],\n",
              "       [    39,  73000],\n",
              "       [    41,  79000],\n",
              "       [    47,  50000],\n",
              "       [    41,  30000],\n",
              "       [    37,  93000],\n",
              "       [    60,  46000],\n",
              "       [    25,  22000],\n",
              "       [    28,  37000],\n",
              "       [    38,  55000],\n",
              "       [    36,  54000],\n",
              "       [    20,  36000],\n",
              "       [    56, 104000],\n",
              "       [    40,  57000],\n",
              "       [    42, 108000],\n",
              "       [    20,  23000],\n",
              "       [    40,  65000],\n",
              "       [    47,  20000],\n",
              "       [    18,  86000],\n",
              "       [    35,  79000],\n",
              "       [    57,  33000],\n",
              "       [    34,  72000],\n",
              "       [    49,  39000],\n",
              "       [    27,  31000],\n",
              "       [    19,  70000],\n",
              "       [    39,  79000],\n",
              "       [    26,  81000],\n",
              "       [    25,  80000],\n",
              "       [    28,  85000],\n",
              "       [    55,  39000],\n",
              "       [    50,  88000],\n",
              "       [    49,  88000],\n",
              "       [    52, 150000],\n",
              "       [    35,  65000],\n",
              "       [    42,  54000],\n",
              "       [    34,  43000],\n",
              "       [    37,  52000],\n",
              "       [    48,  30000],\n",
              "       [    29,  43000],\n",
              "       [    36,  52000],\n",
              "       [    27,  54000],\n",
              "       [    26, 118000]])"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_train.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pCCKtC5jo479",
        "outputId": "a2ce2e23-154c-461e-81f6-2b7688ef72c1"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(300, 2)"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DeEXy6_Do-xx",
        "outputId": "dff85ca9-3e03-4e12-8bb8-da20625970d3"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(100, 2)"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kpvRtIEypCFM",
        "outputId": "0e3bdee0-c2f0-43f1-a59e-df38225116ee"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1,\n",
              "       0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n",
              "       1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1,\n",
              "       0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1,\n",
              "       1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1])"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bgtx2-MtpFuj",
        "outputId": "3f26d85d-2811-446a-a559-2141b71cc741"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1,\n",
              "       0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,\n",
              "       0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0,\n",
              "       0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0,\n",
              "       1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1,\n",
              "       0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0,\n",
              "       1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0,\n",
              "       0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0,\n",
              "       1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1,\n",
              "       0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0,\n",
              "       0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0,\n",
              "       1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1,\n",
              "       1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0,\n",
              "       0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0])"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#scale\n",
        "from sklearn.preprocessing import StandardScaler"
      ],
      "metadata": {
        "id": "HRe7zAb9pN0b"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sc = StandardScaler()"
      ],
      "metadata": {
        "id": "tC6OyMVEpTPW"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 390
        },
        "id": "04_8QDn2pd6B",
        "outputId": "487da6b5-8e9e-480a-e940-9d2e3790d13e"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:203: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            User ID         Age  EstimatedSalary   Purchased\n",
              "count  4.000000e+02  400.000000       400.000000  400.000000\n",
              "mean   1.569154e+07   37.655000     69742.500000    0.357500\n",
              "std    7.165832e+04   10.482877     34096.960282    0.479864\n",
              "min    1.556669e+07   18.000000     15000.000000    0.000000\n",
              "25%    1.562676e+07   29.750000     43000.000000    0.000000\n",
              "50%    1.569434e+07   37.000000     70000.000000    0.000000\n",
              "75%    1.575036e+07   46.000000     88000.000000    1.000000\n",
              "max    1.581524e+07   60.000000    150000.000000    1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b3bb3b4e-0618-4075-92bd-258938ecf115\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User ID</th>\n",
              "      <th>Age</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Purchased</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>4.000000e+02</td>\n",
              "      <td>400.000000</td>\n",
              "      <td>400.000000</td>\n",
              "      <td>400.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>1.569154e+07</td>\n",
              "      <td>37.655000</td>\n",
              "      <td>69742.500000</td>\n",
              "      <td>0.357500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>7.165832e+04</td>\n",
              "      <td>10.482877</td>\n",
              "      <td>34096.960282</td>\n",
              "      <td>0.479864</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.556669e+07</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>15000.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1.562676e+07</td>\n",
              "      <td>29.750000</td>\n",
              "      <td>43000.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>1.569434e+07</td>\n",
              "      <td>37.000000</td>\n",
              "      <td>70000.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>1.575036e+07</td>\n",
              "      <td>46.000000</td>\n",
              "      <td>88000.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1.581524e+07</td>\n",
              "      <td>60.000000</td>\n",
              "      <td>150000.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b3bb3b4e-0618-4075-92bd-258938ecf115')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b3bb3b4e-0618-4075-92bd-258938ecf115 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b3bb3b4e-0618-4075-92bd-258938ecf115');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-8befcbb3-3d3d-4c7b-b94f-d20ff29126de\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8befcbb3-3d3d-4c7b-b94f-d20ff29126de')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-8befcbb3-3d3d-4c7b-b94f-d20ff29126de button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"dataset\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"User ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7247165.99146923,\n        \"min\": 400.0,\n        \"max\": 15815236.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          15691539.7575,\n          15694341.5,\n          400.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 130.27423677374767,\n        \"min\": 10.48287659730792,\n        \"max\": 400.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          37.655,\n          37.0,\n          400.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EstimatedSalary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 47214.004060407126,\n        \"min\": 400.0,\n        \"max\": 150000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          69742.5,\n          70000.0,\n          400.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Purchased\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 141.27865845809382,\n        \"min\": 0.0,\n        \"max\": 400.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.3575,\n          1.0,\n          0.4798639635968701\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 30
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:203: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.iloc[:,[2,3]]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 478
        },
        "id": "mnKrneTTqCjg",
        "outputId": "32dd4725-5ad2-4711-e3f1-faf5c0dccd6f"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Age  EstimatedSalary\n",
              "0     19            19000\n",
              "1     35            20000\n",
              "2     26            43000\n",
              "3     27            57000\n",
              "4     19            76000\n",
              "..   ...              ...\n",
              "395   46            41000\n",
              "396   51            23000\n",
              "397   50            20000\n",
              "398   36            33000\n",
              "399   49            36000\n",
              "\n",
              "[400 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-914d12bf-136b-43f8-8c9a-c750b13b298a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>19</td>\n",
              "      <td>19000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>35</td>\n",
              "      <td>20000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>26</td>\n",
              "      <td>43000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>27</td>\n",
              "      <td>57000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>19</td>\n",
              "      <td>76000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>395</th>\n",
              "      <td>46</td>\n",
              "      <td>41000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>396</th>\n",
              "      <td>51</td>\n",
              "      <td>23000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>397</th>\n",
              "      <td>50</td>\n",
              "      <td>20000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>398</th>\n",
              "      <td>36</td>\n",
              "      <td>33000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>399</th>\n",
              "      <td>49</td>\n",
              "      <td>36000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>400 rows Ã— 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-914d12bf-136b-43f8-8c9a-c750b13b298a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-914d12bf-136b-43f8-8c9a-c750b13b298a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-914d12bf-136b-43f8-8c9a-c750b13b298a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-6478605b-a0bc-4472-aaf8-3137e1f70f53\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6478605b-a0bc-4472-aaf8-3137e1f70f53')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-6478605b-a0bc-4472-aaf8-3137e1f70f53 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"dataset\",\n  \"rows\": 400,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 18,\n        \"max\": 60,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          50,\n          39,\n          38\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EstimatedSalary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34096,\n        \"min\": 15000,\n        \"max\": 150000,\n        \"num_unique_values\": 117,\n        \"samples\": [\n          117000,\n          76000,\n          88000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 34
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:203: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dtemp = sc.fit_transform(dataset.iloc[:,[2,3]])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ryIJeBOopmOe",
        "outputId": "21b84be1-44ca-4038-8cab-4c582d3c8d39"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:203: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "type(dtemp)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Dg9Ea8EkqOIz",
        "outputId": "ddc1bfa8-edf8-4595-aea6-0acbb55e14fb"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "numpy.ndarray"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pd.DataFrame(dtemp).describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 390
        },
        "id": "sntE1X-9qRs9",
        "outputId": "d54635aa-48de-498d-e65e-969aacb2b49a"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:203: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  0             1\n",
              "count  4.000000e+02  4.000000e+02\n",
              "mean  -7.105427e-17 -1.776357e-17\n",
              "std    1.001252e+00  1.001252e+00\n",
              "min   -1.877311e+00 -1.607506e+00\n",
              "25%   -7.550313e-01 -7.852897e-01\n",
              "50%   -6.256110e-02  7.561451e-03\n",
              "75%    7.970571e-01  5.361289e-01\n",
              "max    2.134241e+00  2.356750e+00"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c4527461-c9d8-4b13-a616-def2a22db2d7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>4.000000e+02</td>\n",
              "      <td>4.000000e+02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>-7.105427e-17</td>\n",
              "      <td>-1.776357e-17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.001252e+00</td>\n",
              "      <td>1.001252e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>-1.877311e+00</td>\n",
              "      <td>-1.607506e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>-7.550313e-01</td>\n",
              "      <td>-7.852897e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>-6.256110e-02</td>\n",
              "      <td>7.561451e-03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>7.970571e-01</td>\n",
              "      <td>5.361289e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>2.134241e+00</td>\n",
              "      <td>2.356750e+00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c4527461-c9d8-4b13-a616-def2a22db2d7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c4527461-c9d8-4b13-a616-def2a22db2d7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c4527461-c9d8-4b13-a616-def2a22db2d7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-8268e4de-8ce4-454d-bccb-155c3aeb566e\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8268e4de-8ce4-454d-bccb-155c3aeb566e')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-8268e4de-8ce4-454d-bccb-155c3aeb566e button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"pd\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": 0,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 141.3639350176196,\n        \"min\": -1.8773105578331641,\n        \"max\": 400.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -7.105427357601002e-17,\n          -0.06256109973954335,\n          400.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 1,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 141.35005720112073,\n        \"min\": -1.6075056615492507,\n        \"max\": 400.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -1.7763568394002505e-17,\n          0.007561450570378263,\n          400.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 39
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:203: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_train = sc.fit_transform(x_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZeqE4JfxqtII",
        "outputId": "6262ffb9-6734-46a5-d660-5a8ee3911c28"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:203: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_test = sc.transform(x_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IqncoC8LqxA4",
        "outputId": "8367a286-91ea-42a9-f38c-85b5d78a645f"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:203: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ovr5CuJqqz-k",
        "outputId": "32a57fe8-297d-474a-a9da-ffc49172df03"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 0.58164944, -0.88670699],\n",
              "       [-0.60673761,  1.46173768],\n",
              "       [-0.01254409, -0.5677824 ],\n",
              "       [-0.60673761,  1.89663484],\n",
              "       [ 1.37390747, -1.40858358],\n",
              "       [ 1.47293972,  0.99784738],\n",
              "       [ 0.08648817, -0.79972756],\n",
              "       [-0.01254409, -0.24885782],\n",
              "       [-0.21060859, -0.5677824 ],\n",
              "       [-0.21060859, -0.19087153],\n",
              "       [-0.30964085, -1.29261101],\n",
              "       [-0.30964085, -0.5677824 ],\n",
              "       [ 0.38358493,  0.09905991],\n",
              "       [ 0.8787462 , -0.59677555],\n",
              "       [ 2.06713324, -1.17663843],\n",
              "       [ 1.07681071, -0.13288524],\n",
              "       [ 0.68068169,  1.78066227],\n",
              "       [-0.70576986,  0.56295021],\n",
              "       [ 0.77971394,  0.35999821],\n",
              "       [ 0.8787462 , -0.53878926],\n",
              "       [-1.20093113, -1.58254245],\n",
              "       [ 2.1661655 ,  0.93986109],\n",
              "       [-0.01254409,  1.22979253],\n",
              "       [ 0.18552042,  1.08482681],\n",
              "       [ 0.38358493, -0.48080297],\n",
              "       [-0.30964085, -0.30684411],\n",
              "       [ 0.97777845, -0.8287207 ],\n",
              "       [ 0.97777845,  1.8676417 ],\n",
              "       [-0.01254409,  1.25878567],\n",
              "       [-0.90383437,  2.27354572],\n",
              "       [-1.20093113, -1.58254245],\n",
              "       [ 2.1661655 , -0.79972756],\n",
              "       [-1.39899564, -1.46656987],\n",
              "       [ 0.38358493,  2.30253886],\n",
              "       [ 0.77971394,  0.76590222],\n",
              "       [-1.00286662, -0.30684411],\n",
              "       [ 0.08648817,  0.76590222],\n",
              "       [-1.00286662,  0.56295021],\n",
              "       [ 0.28455268,  0.07006676],\n",
              "       [ 0.68068169, -1.26361786],\n",
              "       [-0.50770535, -0.01691267],\n",
              "       [-1.79512465,  0.35999821],\n",
              "       [-0.70576986,  0.12805305],\n",
              "       [ 0.38358493,  0.30201192],\n",
              "       [-0.30964085,  0.07006676],\n",
              "       [-0.50770535,  2.30253886],\n",
              "       [ 0.18552042,  0.04107362],\n",
              "       [ 1.27487521,  2.21555943],\n",
              "       [ 0.77971394,  0.27301877],\n",
              "       [-0.30964085,  0.1570462 ],\n",
              "       [-0.01254409, -0.53878926],\n",
              "       [-0.21060859,  0.1570462 ],\n",
              "       [-0.11157634,  0.24402563],\n",
              "       [-0.01254409, -0.24885782],\n",
              "       [ 2.1661655 ,  1.11381995],\n",
              "       [-1.79512465,  0.35999821],\n",
              "       [ 1.86906873,  0.12805305],\n",
              "       [ 0.38358493, -0.13288524],\n",
              "       [-1.20093113,  0.30201192],\n",
              "       [ 0.77971394,  1.37475825],\n",
              "       [-0.30964085, -0.24885782],\n",
              "       [-1.6960924 , -0.04590581],\n",
              "       [-1.00286662, -0.74174127],\n",
              "       [ 0.28455268,  0.50496393],\n",
              "       [-0.11157634, -1.06066585],\n",
              "       [-1.10189888,  0.59194336],\n",
              "       [ 0.08648817, -0.79972756],\n",
              "       [-1.00286662,  1.54871711],\n",
              "       [-0.70576986,  1.40375139],\n",
              "       [-1.29996338,  0.50496393],\n",
              "       [-0.30964085,  0.04107362],\n",
              "       [-0.11157634,  0.01208048],\n",
              "       [-0.30964085, -0.88670699],\n",
              "       [ 0.8787462 , -1.3505973 ],\n",
              "       [-0.30964085,  2.24455257],\n",
              "       [ 0.97777845,  1.98361427],\n",
              "       [-1.20093113,  0.47597078],\n",
              "       [-1.29996338,  0.27301877],\n",
              "       [ 1.37390747,  1.98361427],\n",
              "       [ 1.27487521, -1.3505973 ],\n",
              "       [-0.30964085, -0.27785096],\n",
              "       [-0.50770535,  1.25878567],\n",
              "       [-0.80480212,  1.08482681],\n",
              "       [ 0.97777845, -1.06066585],\n",
              "       [ 0.28455268,  0.30201192],\n",
              "       [ 0.97777845,  0.76590222],\n",
              "       [-0.70576986, -1.49556302],\n",
              "       [-0.70576986,  0.04107362],\n",
              "       [ 0.48261718,  1.72267598],\n",
              "       [ 2.06713324,  0.18603934],\n",
              "       [-1.99318916, -0.74174127],\n",
              "       [-0.21060859,  1.40375139],\n",
              "       [ 0.38358493,  0.59194336],\n",
              "       [ 0.8787462 , -1.14764529],\n",
              "       [-1.20093113, -0.77073441],\n",
              "       [ 0.18552042,  0.24402563],\n",
              "       [ 0.77971394, -0.30684411],\n",
              "       [ 2.06713324, -0.79972756],\n",
              "       [ 0.77971394,  0.12805305],\n",
              "       [-0.30964085,  0.6209365 ],\n",
              "       [-1.00286662, -0.30684411],\n",
              "       [ 0.18552042, -0.3648304 ],\n",
              "       [ 2.06713324,  2.12857999],\n",
              "       [ 1.86906873, -1.26361786],\n",
              "       [ 1.37390747, -0.91570013],\n",
              "       [ 0.8787462 ,  1.25878567],\n",
              "       [ 1.47293972,  2.12857999],\n",
              "       [-0.30964085, -1.23462472],\n",
              "       [ 1.96810099,  0.91086794],\n",
              "       [ 0.68068169, -0.71274813],\n",
              "       [-1.49802789,  0.35999821],\n",
              "       [ 0.77971394, -1.3505973 ],\n",
              "       [ 0.38358493, -0.13288524],\n",
              "       [-1.00286662,  0.41798449],\n",
              "       [-0.01254409, -0.30684411],\n",
              "       [-1.20093113,  0.41798449],\n",
              "       [-0.90383437, -1.20563157],\n",
              "       [-0.11157634,  0.04107362],\n",
              "       [-1.59706014, -0.42281668],\n",
              "       [ 0.97777845, -1.00267957],\n",
              "       [ 1.07681071, -1.20563157],\n",
              "       [-0.01254409, -0.13288524],\n",
              "       [-1.10189888, -1.52455616],\n",
              "       [ 0.77971394, -1.20563157],\n",
              "       [ 0.97777845,  2.07059371],\n",
              "       [-1.20093113, -1.52455616],\n",
              "       [-0.30964085,  0.79489537],\n",
              "       [ 0.08648817, -0.30684411],\n",
              "       [-1.39899564, -1.23462472],\n",
              "       [-0.60673761, -1.49556302],\n",
              "       [ 0.77971394,  0.53395707],\n",
              "       [-0.30964085, -0.33583725],\n",
              "       [ 1.77003648, -0.27785096],\n",
              "       [ 0.8787462 , -1.03167271],\n",
              "       [ 0.18552042,  0.07006676],\n",
              "       [-0.60673761,  0.8818748 ],\n",
              "       [-1.89415691, -1.40858358],\n",
              "       [-1.29996338,  0.59194336],\n",
              "       [-0.30964085,  0.53395707],\n",
              "       [-1.00286662, -1.089659  ],\n",
              "       [ 1.17584296, -1.43757673],\n",
              "       [ 0.18552042, -0.30684411],\n",
              "       [ 1.17584296, -0.74174127],\n",
              "       [-0.30964085,  0.07006676],\n",
              "       [ 0.18552042,  2.09958685],\n",
              "       [ 0.77971394, -1.089659  ],\n",
              "       [ 0.08648817,  0.04107362],\n",
              "       [-1.79512465,  0.12805305],\n",
              "       [-0.90383437,  0.1570462 ],\n",
              "       [-0.70576986,  0.18603934],\n",
              "       [ 0.8787462 , -1.29261101],\n",
              "       [ 0.18552042, -0.24885782],\n",
              "       [-0.4086731 ,  1.22979253],\n",
              "       [-0.01254409,  0.30201192],\n",
              "       [ 0.38358493,  0.1570462 ],\n",
              "       [ 0.8787462 , -0.65476184],\n",
              "       [ 0.08648817,  0.1570462 ],\n",
              "       [-1.89415691, -1.29261101],\n",
              "       [-0.11157634,  0.30201192],\n",
              "       [-0.21060859, -0.27785096],\n",
              "       [ 0.28455268, -0.50979612],\n",
              "       [-0.21060859,  1.6067034 ],\n",
              "       [ 0.97777845, -1.17663843],\n",
              "       [-0.21060859,  1.63569655],\n",
              "       [ 1.27487521,  1.8676417 ],\n",
              "       [-1.10189888, -0.3648304 ],\n",
              "       [-0.01254409,  0.04107362],\n",
              "       [ 0.08648817, -0.24885782],\n",
              "       [-1.59706014, -1.23462472],\n",
              "       [-0.50770535, -0.27785096],\n",
              "       [ 0.97777845,  0.12805305],\n",
              "       [ 1.96810099, -1.3505973 ],\n",
              "       [ 1.47293972,  0.07006676],\n",
              "       [-0.60673761,  1.37475825],\n",
              "       [ 1.57197197,  0.01208048],\n",
              "       [-0.80480212,  0.30201192],\n",
              "       [ 1.96810099,  0.73690908],\n",
              "       [-1.20093113, -0.50979612],\n",
              "       [ 0.68068169,  0.27301877],\n",
              "       [-1.39899564, -0.42281668],\n",
              "       [ 0.18552042,  0.1570462 ],\n",
              "       [-0.50770535, -1.20563157],\n",
              "       [ 0.58164944,  2.01260742],\n",
              "       [-1.59706014, -1.49556302],\n",
              "       [-0.50770535, -0.53878926],\n",
              "       [ 0.48261718,  1.83864855],\n",
              "       [-1.39899564, -1.089659  ],\n",
              "       [ 0.77971394, -1.37959044],\n",
              "       [-0.30964085, -0.42281668],\n",
              "       [ 1.57197197,  0.99784738],\n",
              "       [ 0.97777845,  1.43274454],\n",
              "       [-0.30964085, -0.48080297],\n",
              "       [-0.11157634,  2.15757314],\n",
              "       [-1.49802789, -0.1038921 ],\n",
              "       [-0.11157634,  1.95462113],\n",
              "       [-0.70576986, -0.33583725],\n",
              "       [-0.50770535, -0.8287207 ],\n",
              "       [ 0.68068169, -1.37959044],\n",
              "       [-0.80480212, -1.58254245],\n",
              "       [-1.89415691, -1.46656987],\n",
              "       [ 1.07681071,  0.12805305],\n",
              "       [ 0.08648817,  1.51972397],\n",
              "       [-0.30964085,  0.09905991],\n",
              "       [ 0.08648817,  0.04107362],\n",
              "       [-1.39899564, -1.3505973 ],\n",
              "       [ 0.28455268,  0.07006676],\n",
              "       [-0.90383437,  0.38899135],\n",
              "       [ 1.57197197, -1.26361786],\n",
              "       [-0.30964085, -0.74174127],\n",
              "       [-0.11157634,  0.1570462 ],\n",
              "       [-0.90383437, -0.65476184],\n",
              "       [-0.70576986, -0.04590581],\n",
              "       [ 0.38358493, -0.45180983],\n",
              "       [-0.80480212,  1.89663484],\n",
              "       [ 1.37390747,  1.28777882],\n",
              "       [ 1.17584296, -0.97368642],\n",
              "       [ 1.77003648,  1.83864855],\n",
              "       [-0.90383437, -0.24885782],\n",
              "       [-0.80480212,  0.56295021],\n",
              "       [-1.20093113, -1.5535493 ],\n",
              "       [-0.50770535, -1.11865214],\n",
              "       [ 0.28455268,  0.07006676],\n",
              "       [-0.21060859, -1.06066585],\n",
              "       [ 1.67100423,  1.6067034 ],\n",
              "       [ 0.97777845,  1.78066227],\n",
              "       [ 0.28455268,  0.04107362],\n",
              "       [-0.80480212, -0.21986468],\n",
              "       [-0.11157634,  0.07006676],\n",
              "       [ 0.28455268, -0.19087153],\n",
              "       [ 1.96810099, -0.65476184],\n",
              "       [-0.80480212,  1.3457651 ],\n",
              "       [-1.79512465, -0.59677555],\n",
              "       [-0.11157634,  0.12805305],\n",
              "       [ 0.28455268, -0.30684411],\n",
              "       [ 1.07681071,  0.56295021],\n",
              "       [-1.00286662,  0.27301877],\n",
              "       [ 1.47293972,  0.35999821],\n",
              "       [ 0.18552042, -0.3648304 ],\n",
              "       [ 2.1661655 , -1.03167271],\n",
              "       [-0.30964085,  1.11381995],\n",
              "       [-1.6960924 ,  0.07006676],\n",
              "       [-0.01254409,  0.04107362],\n",
              "       [ 0.08648817,  1.05583366],\n",
              "       [-0.11157634, -0.3648304 ],\n",
              "       [-1.20093113,  0.07006676],\n",
              "       [-0.30964085, -1.3505973 ],\n",
              "       [ 1.57197197,  1.11381995],\n",
              "       [-0.80480212, -1.52455616],\n",
              "       [ 0.08648817,  1.8676417 ],\n",
              "       [-0.90383437, -0.77073441],\n",
              "       [-0.50770535, -0.77073441],\n",
              "       [-0.30964085, -0.91570013],\n",
              "       [ 0.28455268, -0.71274813],\n",
              "       [ 0.28455268,  0.07006676],\n",
              "       [ 0.08648817,  1.8676417 ],\n",
              "       [-1.10189888,  1.95462113],\n",
              "       [-1.6960924 , -1.5535493 ],\n",
              "       [-1.20093113, -1.089659  ],\n",
              "       [-0.70576986, -0.1038921 ],\n",
              "       [ 0.08648817,  0.09905991],\n",
              "       [ 0.28455268,  0.27301877],\n",
              "       [ 0.8787462 , -0.5677824 ],\n",
              "       [ 0.28455268, -1.14764529],\n",
              "       [-0.11157634,  0.67892279],\n",
              "       [ 2.1661655 , -0.68375498],\n",
              "       [-1.29996338, -1.37959044],\n",
              "       [-1.00286662, -0.94469328],\n",
              "       [-0.01254409, -0.42281668],\n",
              "       [-0.21060859, -0.45180983],\n",
              "       [-1.79512465, -0.97368642],\n",
              "       [ 1.77003648,  0.99784738],\n",
              "       [ 0.18552042, -0.3648304 ],\n",
              "       [ 0.38358493,  1.11381995],\n",
              "       [-1.79512465, -1.3505973 ],\n",
              "       [ 0.18552042, -0.13288524],\n",
              "       [ 0.8787462 , -1.43757673],\n",
              "       [-1.99318916,  0.47597078],\n",
              "       [-0.30964085,  0.27301877],\n",
              "       [ 1.86906873, -1.06066585],\n",
              "       [-0.4086731 ,  0.07006676],\n",
              "       [ 1.07681071, -0.88670699],\n",
              "       [-1.10189888, -1.11865214],\n",
              "       [-1.89415691,  0.01208048],\n",
              "       [ 0.08648817,  0.27301877],\n",
              "       [-1.20093113,  0.33100506],\n",
              "       [-1.29996338,  0.30201192],\n",
              "       [-1.00286662,  0.44697764],\n",
              "       [ 1.67100423, -0.88670699],\n",
              "       [ 1.17584296,  0.53395707],\n",
              "       [ 1.07681071,  0.53395707],\n",
              "       [ 1.37390747,  2.331532  ],\n",
              "       [-0.30964085, -0.13288524],\n",
              "       [ 0.38358493, -0.45180983],\n",
              "       [-0.4086731 , -0.77073441],\n",
              "       [-0.11157634, -0.50979612],\n",
              "       [ 0.97777845, -1.14764529],\n",
              "       [-0.90383437, -0.77073441],\n",
              "       [-0.21060859, -0.50979612],\n",
              "       [-1.10189888, -0.45180983],\n",
              "       [-1.20093113,  1.40375139]])"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier"
      ],
      "metadata": {
        "id": "99jvCjfWq7gl"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "knn = KNeighborsClassifier(n_neighbors=5)"
      ],
      "metadata": {
        "id": "OhLtRAi3rIpC"
      },
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "knn.fit(x_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 135
        },
        "id": "mCW8Jid_rP01",
        "outputId": "d15f5769-0b17-4e98-fc03-957b07c8e476"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:203: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KNeighborsClassifier()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"â–¸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"â–¾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>KNeighborsClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.neighbors.KNeighborsClassifier.html\">?<span>Documentation for KNeighborsClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>KNeighborsClassifier()</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = knn.predict(x_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ealQYM4zrU1M",
        "outputId": "5f0e738d-6e68-4cce-f037-cec99ed22ac4"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:203: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E1cXw8z-rbKA",
        "outputId": "c2c2aaef-4d02-4611-96ad-d0de07e6bb5f"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1,\n",
              "       0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n",
              "       1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1,\n",
              "       0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1,\n",
              "       1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1])"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score"
      ],
      "metadata": {
        "id": "YS5-VQ4lrg2O"
      },
      "execution_count": 48,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Accuracy -\",accuracy_score(y_test,y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SuA7p9cfrppv",
        "outputId": "235e6a63-760d-4758-9b6d-627f439b36f0"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy - 0.93\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:203: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix"
      ],
      "metadata": {
        "id": "eVoVU6mkr9Q5"
      },
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cm = confusion_matrix(y_test,y_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LHq7qdWJsCkV",
        "outputId": "3d0dbfe8-039f-4c24-ef89-948fd51deb1a"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/jupyter_client/session.py:203: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n",
            "  return datetime.utcnow().replace(tzinfo=utc)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(cm)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nUdVDtoMsGFr",
        "outputId": "4194c099-3526-403d-e8ff-005b63a714a8"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[64  4]\n",
            " [ 3 29]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from matplotlib.colors import ListedColormap"
      ],
      "metadata": {
        "id": "TOyBQjslsQWU"
      },
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_Set, y_set=x_train,y_train"
      ],
      "metadata": {
        "id": "ZU8CEAdvsWF5"
      },
      "execution_count": 54,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x1,x2 = np.meshgrid(np.arange(start=x_Set[:,0].min()-1,stop=x_Set[:,0].max()+1,step=0.01),\n",
        "                    np.arange(start=x_Set[:,1].min()-1,stop=x_Set[:,1].max()+1,step=0.01))"
      ],
      "metadata": {
        "id": "0d708yzGsb-_"
      },
      "execution_count": 55,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#visualization - Test"
      ],
      "metadata": {
        "id": "HL9ZSNYBsnzY"
      },
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x = x_train[:,0]\n",
        "y = x_train[:,1]"
      ],
      "metadata": {
        "id": "eW2TFDyltVgS"
      },
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#colouring\n",
        "c=y_train"
      ],
      "metadata": {
        "id": "kmaJq7k5togw"
      },
      "execution_count": 61,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(x,y,c=c)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 450
        },
        "id": "mYBgGB8dtefd",
        "outputId": "8517f36a-1542-41dc-baad-42a96e9ff066"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x79d60fe020f0>"
            ]
          },
          "metadata": {},
          "execution_count": 62
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#visulization - Test"
      ],
      "metadata": {
        "id": "45KEbMB8ttdw"
      },
      "execution_count": 63,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x=x_test[:,0]\n",
        "y=x_test[:,1]"
      ],
      "metadata": {
        "id": "eTqTkQ_dtx-u"
      },
      "execution_count": 64,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#colour\n",
        "c =y_pred"
      ],
      "metadata": {
        "id": "KIXcpdNKt-Wi"
      },
      "execution_count": 65,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(x,y,c=c)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 450
        },
        "id": "OF94yy6muFRi",
        "outputId": "37b1ee4b-239e-4e37-e924-48f29720ec14"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x79d6121b92b0>"
            ]
          },
          "metadata": {},
          "execution_count": 66
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "c=y_test\n",
        "plt.scatter(x,y,c=c)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 450
        },
        "id": "3VoXcQXTuRni",
        "outputId": "a4f41751-c74d-4812-ba50-65cbfa9d6ddf"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x79d60fe54f20>"
            ]
          },
          "metadata": {},
          "execution_count": 67
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}